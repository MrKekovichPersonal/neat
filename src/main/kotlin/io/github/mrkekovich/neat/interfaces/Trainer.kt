package io.github.mrkekovich.neat.interfaces

import io.github.mrkekovich.neat.exceptions.OutOfSpeciesException

interface Trainer {
    /**
     * The number of input neurons in the neural network.
     */
    val inputs: Long

    /**
     * The number of output neurons in the neural network.
     */
    val outputs: Long

    /**
     * The maximum number of individuals (neural networks) per generation.
     */
    var maxIndividuals: Long

    /**
     * The threshold at which two topologies are considered belonging to different species.
     */
    var deltaThreshold: Double

    /**
     * The coefficient for disjoint genes in the compatibility calculation formula.
     */
    var disjointCoefficient: Double

    /**
     * The coefficient for excess genes in the compatibility calculation formula.
     */
    var excessCoefficient: Double

    /**
     * The coefficient for weight differences in the compatibility calculation formula.
     */
    var weightDifferenceCoefficient: Double

    /**
     * Sets the compatibility formula coefficients for the NEAT algorithm.
     * It is faster than setting each coefficient individually.
     *
     * The compatibility formula determines the compatibility score (delta) between two individuals
     * in the NEAT algorithm based on their genetic differences. It is defined as follows:
     *
     * ```
     * delta = (c1 * disjoints + c2 * excess) / (larger_topology_length - initial_size) + (mean(weight_distances) * c3)
     * ```
     *
     * @param disjointCoefficient Disjoint coefficient: Weight assigned to genes present in the first topology but not in the second.
     * @param excessCoefficient Excess coefficient: Weight assigned to genes present in the second topology but not in the first.
     * @param weightDifferenceCoefficient Weight difference coefficient: Weight assigned to genes with different weights in both topologies.
     */
    fun setCompatibilityFormula(
        disjointCoefficient: Double,
        excessCoefficient: Double,
        weightDifferenceCoefficient: Double,
    )

    /**
     * The probability of changing weights during mutation.
     */
    var weightChangeProbability: Double

    /**
     * The probability of adding a new neuron during mutation.
     */
    var newNeuronProbability: Double

    /**
     * The maximum number of hidden layers allowed in a neural network.
     */
    var maxLayers: Long

    /**
     * The maximum number of neurons allowed per hidden layer in a neural network.
     */
    var maxPerLayers: Long

    /**
     * Determines if crossovers (breeding) are enabled.
     */
    var enableCrossovers: Boolean
    val maxSpeciesCount: Long

    /**
     * Retrieves a list of new neural networks generated by the NEAT algorithm.
     *
     * @return A list of UnsafeNeuralNetwork objects representing the new neural networks.
     * @throws OutOfSpeciesException if there are no species left in the algorithm.
     */
    fun getNewNetworks(): List<NeuralNetwork>

    /**
     * Retrieves a list of the best topologies (structures) found by the NEAT algorithm.
     *
     * @return A list of UnsafeTopology objects representing the best topologies.
     */
    fun getBestTopologies(): List<Topology>

    /**
     * Steps through one generation of the NEAT algorithm using the provided scores.
     *
     * @param scores A DoubleArray containing the fitness scores for the current generation.
     * Must be ordered in the same way as new networks were given.
     * @return A list of UnsafeNeuralNetwork objects representing the new neural networks generated in the next generation.
     * @throws OutOfSpeciesException if there are no species left in the algorithm.
     */
    fun step(scores: DoubleArray): List<NeuralNetwork>

    /**
     * Creates a new specie with a new topology.
     */
    fun createNewSpecie()
}